name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - '*-v*.*.*' # e.g., component-prefixed tags from Release Please like autopathcomment-v1.2.3
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref || github.run_id }}
  cancel-in-progress: false

env:
  NODE_VERSION: 24

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug tag context
        run: |
          echo "github.ref=$GITHUB_REF"
          echo "github.sha=$GITHUB_SHA"
          echo "github.event_name=$GITHUB_EVENT_NAME"
          echo "Tag (raw): ${GITHUB_REF#refs/tags/}"
          git describe --tags --always || true

      - name: Verify tag matches package.json version
        id: verify
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          REF_VAL='${{ github.ref }}'
          if [[ "$REF_VAL" == refs/tags/* ]]; then
            TAG=${REF_VAL#refs/tags/}
          else
            TAG="" # workflow_dispatch or non-tag context
          fi
          TAG_NOPREFIX=${TAG#autopathcomment-}
          if [[ -n "$TAG_NOPREFIX" && "$TAG_NOPREFIX" != "v$PKG_VERSION" ]]; then
            echo "Tag $TAG does not match package.json version v$PKG_VERSION" >&2
            exit 1
          fi
          echo "version=$PKG_VERSION" >> "$GITHUB_OUTPUT"

      - name: Build dist
        run: npm run package

      - name: Package VSIX
        run: npx --yes @vscode/vsce package

      - name: Compute artifact name
        id: vars
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          FILE="$NAME-$VERSION.vsix"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.name }}-${{ steps.verify.outputs.version }}
          path: ${{ steps.vars.outputs.file }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.vars.outputs.file }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to VS Code Marketplace
        if: ${{ secrets.VSCE_PAT != '' }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          echo "Publishing to VS Code Marketplace"
          npx --yes @vscode/vsce publish --packagePath "${{ steps.vars.outputs.file }}"
